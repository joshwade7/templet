export declare const getQuery: (contextAri: string, key: string, encrypted: boolean) => {
    query: string;
    variables: {
        contextAri: string;
        key: string;
        encrypted: boolean;
    };
};
export interface StartsWithClause {
    field: string;
    condition: 'STARTS_WITH';
    value: string;
}
export interface NotEqualToClause {
    field: string;
    condition: 'NOT_EQUAL_TO';
    value: string[];
}
export interface InClause {
    field: string;
    condition: 'IN';
    value: string[];
}
export declare type WhereClause = StartsWithClause | NotEqualToClause | InClause;
export interface ListOptions {
    where?: Array<WhereClause>;
    cursor?: string;
    limit?: number;
}
export declare const listQuery: (contextAri: string, options: ListOptions) => {
    query: string;
    variables: {
        contextAri: string;
        where: WhereClause[] | null;
        cursor: string | null;
        limit: number | null;
    };
};
export declare const listQueryForCleanup: (contextAri: string, options: ListOptions) => {
    query: string;
    variables: {
        contextAri: string;
        where: WhereClause[] | null;
        cursor: string | null;
        limit: number | null;
    };
};
export declare const setQuery: (contextAri: string, key: string, value: any, encrypted: boolean) => {
    query: string;
    variables: {
        input: {
            contextAri: string;
            key: string;
            value: any;
            encrypted: boolean;
        };
    };
};
export declare const deleteQuery: (contextAri: string, key: string, encrypted: boolean) => {
    query: string;
    variables: {
        input: {
            contextAri: string;
            key: string;
            encrypted: boolean;
        };
    };
};
//# sourceMappingURL=queries.d.ts.map